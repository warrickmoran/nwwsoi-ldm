#!/usr/bin/env python
# encoding: utf-8
'''
gov.noaa.nww_oi.nww_oi_muc -- shortdesc

gov.noaa.nww_oi.nww_oi_muc is a description

It defines classes_and_methods

@author:     user_name

@copyright:  2019 organization_name. All rights reserved.

@license:    license

@contact:    user_email
@deffield    updated: Updated
'''

from multiprocessing.dummy import JoinableQueue
from nturl2path import url2pathname
import sys
sys.path.append(".")

import sys
import os
import yaml
import logging.config
import coloredlogs
import getpass
import asyncio
from slixmpp import JID
from threading import Thread

import janus

from socket import gethostname
import helpers.nwws_oi_muc_slibot as bot

from signal import signal, SIGINT
from sys import exit

from optparse import OptionParser

import multiprocessing


raw_input = input
# Create a custom logger
logger = logging.getLogger(__name__)
program_name = os.path.basename(sys.argv[0])
program_version = "v0.1"
# program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
program_longdesc = ''''''  # optional - give further explanation about what the program does
program_license = "Copyright 2022 Warrick Moran (National Weather Service)                                            \
                Licensed under the GNU General Public License v3.0\nhttps://www.gnu.org/licenses/"
                


def main(argv=None):
    try:
        # Setup logging.
        opts = process_options()
        
        if (opts != None):
            setup_logging(default_path=opts.logconfig, default_level=opts.loglevel)

            logger.info('Started')

            global xmpp
            global messageQueue
            global ingest

            logger.info("JID: {} URL: {}".format(opts.jid, opts.url))

            messageQueue = multiprocessing.JoinableQueue()

            xmpp = sleek(JID(opts.jid), messageQueue, opts.password, opts.url)
            
            # send test message
            #p2 = multiprocessing.Process(target=send_test_msg)
  
            # starting process 1
            #p2.start()
            
            # ldm must run on main thread
            #ingest = MyProductIngestor(xmpp)
            
            xmpp.join()
            
            return 0
        else:
            help()
            return 2
    except Exception as e:
        print(e)
        help(e)
        
        return 2

def help(ex):
    indent = len(program_name) * " "
    sys.stderr.write(program_name + ": " + repr(ex) + "\n")
    sys.stderr.write(indent + "  for help use --help")
    
def shutdown(): 
    if (xmpp != None):
        xmpp.disconnect(wait=True)
        xmpp = None
        logging.error("XMPP Client Shutdown")
        
def process_options():
    try:
        # setup option parser
        parser = OptionParser(version=program_version,
                          epilog=program_longdesc, description=program_license)
        parser.add_option("-l", "--logconfig", dest="logconfig",
                      help="yaml logging config file", default='./logging.yaml')
        parser.add_option('-v', '--verbose', help='set logging to COMM', action='store_const',
                      dest='loglevel', const=logging.DEBUG, default=logging.INFO)

        # set defaults

        # JID and password options.
        parser.add_option("-j", "--jid", dest="jid", help="JID to use")
        parser.add_option("-p", "--password", dest="password",
                      help="password to use")
        #parser.add_option("-r", "--room", dest="room", help="MUC room to join",
        #                  default='nwws@conference.nwws-oi.weather.gov/nwws-oi')
        parser.add_option("-n", "--nick", dest="nick",
                      help="MUC nickname", default=gethostname())
        parser.add_option("-u", "--url", dest="url",
                      help="url for OpenFire server", default='nwws-oi.weather.gov')

        # process options
        (opts, args) = parser.parse_args()

        if opts.loglevel > 0:
            logger.info("verbosity level = %d" % opts.loglevel)

        if opts.jid is None:
            opts.jid = raw_input("Username: ")

        if opts.password is None:
            opts.password = getpass.getpass("Password: ")

        if opts.nick is None:
            opts.nick = raw_input("MUC nickname: ")

        # MAIN BODY #
        logger.debug("Username {}, Password {}".format(
            opts.jid, opts.password))

        if ('@' not in opts.jid):
            opts.jid = "{}@{}".format(opts.jid,
                                  'conference.nwws-oi.weather.gov/nwws-oi')
            
        return opts
    except Exception as e:
        print(e)
        help()
        return None

def setup_logging(default_path='./logging.yaml', default_level=logging.INFO, env_key='LOG_CFG'):
    """
    | **@author:** Prathyush SP
    | Logging Setup
    """
    path = default_path
    value = os.getenv(env_key, None)
    if value:
        path = value
    if os.path.exists(path):
        with open(path, 'rt') as f:
            try:
                config = yaml.safe_load(f.read())
                logging.config.dictConfig(config)
                coloredlogs.install()
            except Exception as e:
                print(e)
                print('Error in Logging Configuration. Using default configs')
                logging.basicConfig(level=default_level)
                coloredlogs.install(level=default_level)
    else:
        logging.basicConfig(filename='example.log', level=logging.DEBUG)
        coloredlogs.install(level=logging.INFO)
        print('Failed to load configuration file. Using default configs')


def handler(signal_received, frame):
    # Handle any cleanup here
    logging.error('SIGINT or CTRL-C detected. Exiting gracefully')

    try:
        shutdown()
    except Exception as e:
        logging.warning(e.message)
    finally:
        logging.info("=>>> now exit and close.")
        # sys.exit(-1)
        xmpp.terminate()
        exit(0)


def sleek(jid: JID, messageQueue:multiprocessing.JoinableQueue, password, url):
    xmpp = bot.MUCBotQueue(messageQueue, jid, password, url)
    xmpp.start()
    return xmpp

if __name__ == "__main__":
    TEST = True
    signal(SIGINT, handler)
    main()
