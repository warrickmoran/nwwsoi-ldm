#!/usr/bin/env python
# encoding: utf-8
'''
gov.noaa.nww_oi.nww_oi_muc -- shortdesc

gov.noaa.nww_oi.nww_oi_muc is a description

It defines classes_and_methods

@author:     user_name

@copyright:  2019 organization_name. All rights reserved.

@license:    license

@contact:    user_email
@deffield    updated: Updated
'''

import sys
import os
import yaml
import logging.config
import coloredlogs
import getpass
import asyncio
import slixmpp.features.feature_mechanisms as features_mechanisms
import slixmpp.features.feature_starttls as features_starttls
import slixmpp.features.feature_bind as features_bind
import slixmpp.features.feature_session as features_session
import slixmpp.features.feature_rosterver as features_rosterver
import slixmpp.features.feature_preapproval as features_preapproval


import slixmpp.plugins.xep_0030 as xep_0030
import slixmpp.plugins.xep_0045 as xep_0045
import slixmpp.plugins.xep_0199 as xep_0199
import slixmpp.plugins.xep_0004 as xep_0004
import slixmpp.plugins.xep_0092 as xep_0092

from socket import gethostname
import nwws_oi_muc_slibot as bot
from signal import signal, SIGINT
from sys import exit

from optparse import OptionParser


raw_input = input
# Create a custom logger
logger = logging.getLogger(__name__)


__all__ = []
__version__ = 0.1
__date__ = '2022-11-05'
__updated__ = '2022-01-14'

DEBUG = 0
TESTRUN = 0
PROFILE = 0
OI_URL = "nwws-oi.weather.gov"
OI_PORT = 5222


def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (
        program_version, program_build_date)
    # program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = ''''''  # optional - give further explanation about what the program does
    program_license = "Copyright 2022 Warrick Moran (National Weather Service)                                            \
                Licensed under the GNU General Public License v3.0\nhttps://www.gnu.org/licenses/"

    try:
        # setup option parser
        parser = OptionParser(version=program_version_string,
                              epilog=program_longdesc, description=program_license)
        parser.add_option("-l", "--logconfig", dest="logconfig",
                          help="yaml logging config file", default='./logging.yaml')
        parser.add_option('-v', '--verbose', help='set logging to COMM', action='store_const',
                          dest='loglevel', const=logging.DEBUG, default=logging.INFO)

        # set defaults

        # JID and password options.
        parser.add_option("-j", "--jid", dest="jid", help="JID to use")
        parser.add_option("-p", "--password", dest="password",
                          help="password to use")
        parser.add_option("-r", "--room", dest="room", help="MUC room to join",
                          default='nwws@conference.nwws-oi.weather.gov/nwws-oi')
        parser.add_option("-n", "--nick", dest="nick",
                          help="MUC nickname", default=gethostname())
        parser.add_option("-m", "--metrics", dest="metrics",
                          help="display MUC metrics", action="store_true")
        parser.add_option("-i", "--interval", dest="interval",
                          help="MUC metrics display interval", default=5, type=int)
        parser.add_option("-d", "--ldm", dest="ldm",
                          help="location of pqinsert command", default=False, action="store_true")
        parser.add_option("-u", "--url", dest="url",
                          help="url for OpenFire server", default='nwws-oi.weather.gov')

        # process options
        (opts, args) = parser.parse_args()

        # Setup logging.
        setup_logging(default_level=opts.loglevel)

        logger.info('Started')

        if opts.loglevel > 0:
            logger.info("verbosity level = %d" % opts.loglevel)

        if opts.jid is None:
            opts.jid = raw_input("Username: ")

        if opts.password is None:
            opts.password = getpass.getpass("Password: ")

        if opts.room is None:
            opts.room = raw_input("MUC room: ")

        if opts.nick is None:
            opts.nick = raw_input("MUC nickname: ")

        # MAIN BODY #
        logger.debug("Username {}, Password {}".format(
            opts.jid, opts.password))

        if ('@' not in opts.jid):
            opts.jid = "{}@{}".format(opts.jid,
                                      'conference.nwws-oi.weather.gov/nwws-oi')


        global xmpp

        q = asyncio.Queue()

        xmpp = bot.MUCBot(opts.jid, opts.password, opts.room,
                          opts.nick, opts.url, q, opts.ldm)

        sleek(q, opts.url)

    except Exception as e:
        print(e)
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2


def setup_logging(default_path='./logging.yaml', default_level=logging.INFO, env_key='LOG_CFG'):
    """
    | **@author:** Prathyush SP
    | Logging Setup
    """
    path = default_path
    value = os.getenv(env_key, None)
    if value:
        path = value
    if os.path.exists(path):
        with open(path, 'rt') as f:
            try:
                config = yaml.safe_load(f.read())
                logging.config.dictConfig(config)
                coloredlogs.install()
            except Exception as e:
                print(e)
                print('Error in Logging Configuration. Using default configs')
                logging.basicConfig(level=default_level)
                coloredlogs.install(level=default_level)
    else:
        logging.basicConfig(level=default_level)
        coloredlogs.install(level=logging.INFO)
        print('Failed to load configuration file. Using default configs')


def handler(signal_received, frame):
    # Handle any cleanup here
    logging.error('SIGINT or CTRL-C detected. Exiting gracefully')

    try:
        if (xmpp != None):
            xmpp.disconnect(wait=True)
            xmpp = None

    except Exception as e:
        logging.warning(e.message)
    finally:
        logging.info("=>>> now exit and close.")
        # sys.exit(-1)
        exit(0)


def sleek(q, url):
    features_starttls.STARTTLS.name

    features_bind.FeatureBind.name
    xmpp[features_mechanisms.FeatureMechanisms.name].unencrypted_plain = True
    xmpp.register_plugin(xep_0030.XEP_0030.name)  # Service Discovery

    xmpp.register_plugin('xep_0045')  # Multi-User Chat
    xmpp.register_plugin(
        'xep_0199', {'keepalive': True, 'interval': 300, 'timeout': 5})  # XMPP Ping

    # Connect to the XMPP server and start processing XMPP stanzas.
    xmpp.connect((url, OI_PORT), use_ssl=False)
    xmpp.process()


if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = 'gov.noaa.nww_oi.nww_oi_muc_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    signal(SIGINT, handler)
    sys.exit(main())
